steps:
# Build the image
- id: 'build-image'
  name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'us-central1-docker.pkg.dev/carlosvalencia-dev/gh-updates/imgfromgit:$COMMIT_SHA', '.']
  env: ['DOCKER_BUILDKIT=1'] # Optional: Enable Docker BuildKit
  timeout: '5m' # Optional: Set a timeout for the build step

# Push the image to Artifact Registry
- id: 'push-image'
  name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'us-central1-docker.pkg.dev/carlosvalencia-dev/gh-updates/imgfromgit:$COMMIT_SHA']
  timeout: '2m' # Optional: Set a timeout for the push step

# Deploy image to Cloud Run
- id: 'deploy-to-cloud-run'
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'testcont' # Using hardcoded service name, consider using a substitution if it varies
    - '--image'
    - 'us-central1-docker.pkg.dev/carlosvalencia-dev/gh-updates/imgfromgit:$COMMIT_SHA'
    - '--region'
    - 'us-central1' # Using hardcoded region, consider using a substitution if it varies
    # Add any other Cloud Run flags you might need, e.g., --platform managed, --allow-unauthenticated, --memory, --cpu, etc.
  timeout: '5m' # Optional: Set a timeout for the deployment step

images:
- 'us-central1-docker.pkg.dev/carlosvalencia-dev/gh-updates/imgfromgit:$COMMIT_SHA'

steps:
- name: 'gcr.io/cloud-builders/git'
  # The 'env' field directly sets environment variables for this step.
  # These variables will be available to all commands run within this step.
  env:
  - 'HTTP_PROXY=http://10.128.0.2:8888'
  - 'HTTPS_PROXY=http://10.128.0.2:8888'
  # Ensure NO_PROXY is correctly set for your internal network ranges and GCP services.
  - 'NO_PROXY=localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.svc.cluster.local,.local,metadata.google.internal'
  
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Proxy settings applied via 'env' for this step."
    echo "HTTP_PROXY: $HTTP_PROXY"
    echo "HTTPS_PROXY: $HTTPS_PROXY"
    echo "NO_PROXY: $NO_PROXY"

    # Configure Git to use the proxy for both HTTP and HTTPS.
    # Git checks these environment variables, but explicit config ensures it.
    git config --global http.proxy "$HTTP_PROXY"
    git config --global https.proxy "$HTTPS_PROXY"

    echo "Attempting to clone the public repository: https://github.com/valensz/testapp.git"
    git clone https://github.com/valensz/testapp.git /workspace/testapp

    echo "Repository cloned successfully. Listing contents:"
    ls -la /workspace/testapp

- name: 'ubuntu' # Another step, requiring re-setting env vars if needed
  env: # Re-set proxy variables for this step
  - 'HTTP_PROXY=http://10.128.0.2:8888'
  - 'HTTPS_PROXY=http://10.128.0.2:8888'
  - 'NO_PROXY=localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.svc.cluster.local,.local,metadata.google.internal'
  
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Running commands in the second step with proxy..."
    cd /workspace/testapp
    echo "Placeholder for actual build/test commands on testapp."
    cat requirements.txt # Example: show contents of a file

options:
  pool:
    name: 'projects/carlosvalencia-dev/locations/us-central1/workerPools/workerp1'
  logging: CLOUD_LOGGING_ONLY

# Optional: Define substitutions for better flexibility
# substitutions:
#   _LOCATION: us-central1
#   _SERVICE_NAME: testcont.
